// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: videos.sql

package database

import (
	"context"
)

const getRenderedVideos = `-- name: GetRenderedVideos :many
SELECT r.label, r.bitrate, r.path
  FROM videos v
  JOIN renditions r ON r.video_id = v.id
 WHERE v.id = ?1
   AND v.status = 'ready'
 ORDER BY r.bitrate
`

type GetRenderedVideosRow struct {
	Label   string
	Bitrate int64
	Path    string
}

func (q *Queries) GetRenderedVideos(ctx context.Context, videoid string) ([]GetRenderedVideosRow, error) {
	rows, err := q.db.QueryContext(ctx, getRenderedVideos, videoid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRenderedVideosRow
	for rows.Next() {
		var i GetRenderedVideosRow
		if err := rows.Scan(&i.Label, &i.Bitrate, &i.Path); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
